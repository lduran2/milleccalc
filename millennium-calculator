/* vim: set syntax=javascript : */

/*
   Millennium Calculator (in JavaScript)
   by: https://github.com/lduran2
   started: 2018-02-26
   The main script for the Millennium Calculator.
 */
(function () {
	let htmlns = 'http://www.w3.org/1999/xhtml'
	let head = document.head;
	let yellowBackground = document.createElementNS(htmlns, 'link');
	setAttributes(yellowBackground, {
		'rel': 'stylesheet',
		'type': 'text/css',
		'href': 'yellow-background.css'
	});
	head.appendChild(yellowBackground);

	let body = document.body;
	let calculatorDiv = document.createElementNS(htmlns, 'div');
	calculatorDiv.id = 'calculator-box';

	let resultDiv = createTextElement('div', '0.');
	resultDiv.id = 'result-box';
	let standby = true;

	let numbersDiv = document.createElement('div');
	numbersDiv.id = 'numbers-col';

	let clearDiv = document.createElement('div');
	clearDiv.id = 'clear-row';
	let clearButtons = [
		{
			'text': 'CA',
			'func': function () {
				resultDiv.firstChild.nodeValue = '0.';
				standby = true;
			}
		},
		{
			'text': 'CE',
			'func': function () {
				resultDiv.firstChild.nodeValue = '0.';
				standby = true;
			}
		},
		{
			'text': 'Back',
			'func': function () {
				let resultText = resultDiv.firstChild;
				if (!standby) {
					resultText.nodeValue = resultText.nodeValue.substring(0, resultText.nodeValue.length - 1);
				}
				if (resultText.nodeValue.length == 0) {
					resultText.nodeValue = '0.';
					standby = true;
				}
			}
		}
	];

	let memoryDiv = document.createElement('div');
	memoryDiv.id = 'memory-col';
	let memory = 0;
	let memoryButtons = [
		{
			'text': 'MC',
			'func': function () {
				memory = 0;
				standby = true;
			}
		},
		{
			'text': 'MR',
			'func': function () {
				resultDiv.firstChild.nodeValue = memory;
				standby = true;
			}
		},
		{
			'text': 'MS',
			'func': function () {
				memory = Number.parseFloat(resultDiv.firstChild.nodeValue);
				standby = true;
			}
		},
		{
			'text': 'M+',
			'func': function () {
				memory += Number.parseFloat(resultDiv.firstChild.nodeValue);
				standby = true;
			}
		}
	];

	let digitGridDiv = document.createElement('div');
	digitGridDiv.id = 'digit-grid';
	let digitButtons = [
		[
			{
				'text': '7',
				'func': typeDigit
			},
			{
				'text': '8',
				'func': typeDigit
			},
			{
				'text': '9',
				'func': typeDigit
			}
		],
		[
			{
				'text': '4',
				'func': typeDigit
			},
			{
				'text': '5',
				'func': typeDigit
			},
			{
				'text': '6',
				'func': typeDigit
			}
		],
		[
			{
				'text': '1',
				'func': typeDigit
			},
			{
				'text': '2',
				'func': typeDigit
			},
			{
				'text': '3',
				'func': typeDigit
			}
		],
		[
			{
				'text': '0',
				'func': typeDigit
			},
			{
				'text': '+/-',
				'func': function () {
					let resultText = resultDiv.firstChild;
					if (!standby) {
						if (resultText.nodeValue.startsWith('-')) {
							resultText.nodeValue = resultText.nodeValue.substring(1);
						}
						else {
							resultText.nodeValue = '-' + resultText.nodeValue;
						}
					}
				}
			},
			{
				'text': '.',
				'func': function () {
					let resultText = resultDiv.firstChild;
					let dot = this.firstChild.nodeValue;
					if (standby) {
						standby = false;
					}
					else if (resultText.nodeValue.indexOf(dot) < 0) {
						resultText.nodeValue += dot;
					}
				}
			}
		]
	];

	appendButtonGrid(digitButtons, digitGridDiv, 'digit-row');

	appendButtons(clearButtons, clearDiv);
	appendButtons(memoryButtons, memoryDiv);

	numbersDiv.append(clearDiv);
	numbersDiv.append(memoryDiv);
	numbersDiv.append(digitGridDiv);

	calculatorDiv.append(resultDiv);
	calculatorDiv.append(numbersDiv);
	body.insertBefore(calculatorDiv, body.lastChild);

	function createTextElement(tagName, text) {
		let element = document.createElementNS(htmlns, tagName);
		element.appendChild(document.createTextNode(text));
		return element;
	}

	function setAttributes(element, attributes) {
		let k;
		let keys = Object.keys(attributes);
		let values = Object.values(attributes);
		for (k = (keys.length - 1); k >= 0; --k) {
			element.setAttribute(keys[k], values[k]);
		}
	}

	function appendButtons(buttons, parent) {
		let k;
		let lastChild = null;
		for (k = (buttons.length - 1); k >= 0; --k) {
			let newChild = createTextElement('button', buttons[k].text);
			newChild.onclick = buttons[k].func;
			parent.insertBefore(newChild, lastChild);
			lastChild = newChild;
		}
	}

	function appendButtonGrid(buttons, parent, rowClassName) {
		let k;
		let rowDiv;
		let lastChild = null;
		for (k = (buttons.length - 1); k >= 0; --k) {
			rowDiv = document.createElement('div');
			rowDiv.className = rowClassName;
			appendButtons(buttons[k], rowDiv);
			parent.insertBefore(rowDiv, lastChild);
			lastChild = rowDiv;
		}
	}

	function typeDigit() {
		let digit = this.firstChild.nodeValue;
		if (standby) {
			resultDiv.firstChild.nodeValue = digit;
			standby = false;
		}
		else {
			resultDiv.firstChild.nodeValue += digit;
		}
	}
})();